/*
Hypatia: A realtime malware scanner for Android
Copyright (c) 2017-2018 Divested Computing Group

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.TextView;

import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnels;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.util.Date;
import java.util.concurrent.ConcurrentLinkedQueue;

class Database {

    private static TextView log = null;
    private static SharedPreferences prefs = null;
    private static File databasePath = null;
    private static boolean databaseFullyLoaded = false;
    private static boolean databaseCurrentlyLoading = false;

    public final static ConcurrentLinkedQueue<SignatureDatabase> signatureDatabases = new ConcurrentLinkedQueue<>();
    public static BloomFilter<String> signaturesMD5 = null;
    public static BloomFilter<String> signaturesSHA1 = null;
    public static BloomFilter<String> signaturesSHA256 = null;

    private static final DateFormat dateFormat = DateFormat.getDateInstance();

    public Database(TextView log) {
        Database.log = log;
    }

    public static boolean areDatabasesAvailable() {
        return databasePath != null && databasePath.listFiles().length > 0 && signatureDatabases.size() > 0;
    }

    public static boolean isDatabaseLoaded() {
        return areDatabasesAvailable() && databaseFullyLoaded;
    }

    public static void updateDatabase(Context context, ConcurrentLinkedQueue<SignatureDatabase> signatureDatabases) {
        initDatabase(context);
        log.append(context.getString(R.string.main_database_updating, String.valueOf(signatureDatabases.size())) + "\n");
        if (!Utils.getDatabaseURL(context).equals(Utils.DATABASE_URL_DEFAULT)) {
            log.append(context.getString(R.string.main_database_override, Utils.getDatabaseURL(context)) + "\n");
        }
        boolean onionRouting = prefs.getBoolean("ONION_ROUTING", false);
        new Downloader().executeOnExecutor(Utils.getThreadPoolExecutor(), onionRouting, Utils.getDatabaseURL(context) + "gpg.key", databasePath + "/gpg.key", Utils.getDatabaseURL(context));

        for (SignatureDatabase signatureDatabase : signatureDatabases) {
            new Downloader().executeOnExecutor(Utils.getThreadPoolExecutor(), onionRouting, signatureDatabase.getUrl(), databasePath + "/" + signatureDatabase.getName(), signatureDatabase.getBaseUrl());
            new Downloader().executeOnExecutor(Utils.getThreadPoolExecutor(), onionRouting, signatureDatabase.getUrl() + ".sig", databasePath + "/" + signatureDatabase.getName() + ".sig", signatureDatabase.getBaseUrl());
        }
    }

    private static void initDatabase(Context context) {
        databasePath = new File(context.getFilesDir() + "/signatures/");
        databasePath.mkdir();

        signatureDatabases.clear();
        prefs = context.getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_PRIVATE);
        String baseURL = Utils.getDatabaseURL(context);
        signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-md5-bloom.bin"));
        signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-sha1-bloom.bin"));
        signatureDatabases.add(new SignatureDatabase(baseURL, "hypatia-sha256-bloom.bin"));
    }

    public static void loadDatabase(Context context, boolean forceReload, ConcurrentLinkedQueue<SignatureDatabase> signatureDatabases) {
        if ((!isDatabaseLoaded() || forceReload) && !databaseCurrentlyLoading) {
            databaseFullyLoaded = false;
            databaseCurrentlyLoading = true;
            initDatabase(context);
            File publicKey = new File(databasePath + "/gpg.key");
            GPGDetachedSignatureVerifier verifier = new GPGDetachedSignatureVerifier(Utils.getSigningKey(context));
            for (SignatureDatabase database : signatureDatabases) {
                File databaseLocation = new File(databasePath + "/" + database.getName());
                File databaseSigLocation = new File(databasePath + "/" + database.getName() + ".sig");
                if (publicKey.exists() && databaseLocation.exists() && databaseSigLocation.exists()) {
                    try {
                        boolean validated = verifier.verify(databaseLocation, databaseSigLocation, publicKey);
                        if (validated) {
                            Log.d("Hypatia", "Successfully validated database");
                            FileInputStream databaseLoading = new FileInputStream(databaseLocation);
                            switch (databaseLocation.getName()) {
                                case "hypatia-md5-bloom.bin":
                                    Log.d("Hypatia", "Processing md5");
                                    signaturesMD5 = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(StandardCharsets.US_ASCII));
                                    break;
                                case "hypatia-sha1-bloom.bin":
                                    Log.d("Hypatia", "Processing sha1");
                                    signaturesSHA1 = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(StandardCharsets.US_ASCII));
                                    break;
                                case "hypatia-sha256-bloom.bin":
                                    Log.d("Hypatia", "Processing sha256");
                                    signaturesSHA256 = BloomFilter.readFrom(databaseLoading, Funnels.stringFunnel(StandardCharsets.US_ASCII));
                                    break;
                            }
                            databaseLoading.close();
                        } else {
                            Log.w("Hypatia", "Failed to validate database");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                System.gc();
            }
            System.gc();
            databaseFullyLoaded = true;
            databaseCurrentlyLoading = false;
        }
    }

    public static class Downloader extends AsyncTask<Object, String, String> {
        @Override
        protected String doInBackground(Object... objects) {
            boolean onionRouting = (boolean) objects[0];
            String url = (String) objects[1];
            File out = new File((String) objects[2]);
            String baseURL = (String) objects[3];
            try {
                HttpURLConnection connection;
                if (onionRouting) {
                    Utils.waitUntilOrbotIsAvailable();
                    Proxy orbot = new Proxy(Proxy.Type.SOCKS, new InetSocketAddress("127.0.0.1", 9050));
                    connection = (HttpURLConnection) new URL(url).openConnection(orbot);
                } else {
                    connection = (HttpURLConnection) new URL(url).openConnection();
                }
                connection.setConnectTimeout(90000);
                connection.setReadTimeout(30000);
                connection.addRequestProperty("User-Agent", "Hypatia");
                String lastModifiedLocal = "";
                if (out.exists()) {
                    connection.setIfModifiedSince(out.lastModified());
                    lastModifiedLocal = Utils.getContext().getString(R.string.main_database_not_modified_since, dateFormat.format(new Date(out.lastModified())));
                }
                connection.connect();
                String lastModifiedServer = dateFormat.format(new Date(connection.getLastModified()));
                int res = connection.getResponseCode();
                if (res != 304) {
                    if (res == 200) {
                        if (out.exists()) {
                            out.delete();
                        }
                        FileOutputStream fileOutputStream = new FileOutputStream(out);

                        final byte[] data = new byte[1024];
                        int count;
                        while ((count = connection.getInputStream().read(data, 0, 1024)) != -1) {
                            fileOutputStream.write(data, 0, count);
                        }

                        fileOutputStream.close();
                        publishProgress(url.replaceAll(baseURL, "")
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_download_success)
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_released_on, lastModifiedServer) + "\n");
                    } else {
                        publishProgress(url.replaceAll(baseURL, "")
                                + "\n\t" + Utils.getContext().getString(R.string.main_database_download_error, String.valueOf(res)) + "\n");
                    }
                } else {
                    publishProgress(url.replaceAll(baseURL, "")
                            + "\n\t" + Utils.getContext().getString(R.string.main_database_not_changed) + " " + lastModifiedLocal + "\n");
                }
                connection.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
                out.delete();
                publishProgress(url.replaceAll(baseURL, "")
                        + "\n" + Utils.getContext().getString(R.string.main_database_download_error_logcat) + "\n");
            }
            return null;
        }

        @Override
        protected final void onProgressUpdate(String... progress) {
            log.append(progress[0] + "\n");
        }
    }
}

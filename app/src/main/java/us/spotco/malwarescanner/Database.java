package us.spotco.malwarescanner;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.net.HttpURLConnection;
import java.net.URL;

import gnu.trove.map.hash.THashMap;
import gnu.trove.set.hash.THashSet;

class Database {

    private static TextView log = null;
    private static File databasePath = null;

    public final static THashSet<SignatureDatabase> signatureDatabases = new THashSet<>();

    public final static THashMap<String, String> signaturesMD5 = new THashMap<>();
    public final static THashMap<String, String> signaturesSHA1 = new THashMap<>();
    public final static THashMap<String, String> signaturesSHA256 = new THashMap<>();

    public Database(TextView log) {
        Database.log = log;
    }

    public static boolean areDatabasesAvailable() {
        return databasePath != null && databasePath.listFiles().length > 0;
    }

    public static boolean isDatabaseLoaded() {
        return signaturesMD5.size() > 0 && signaturesSHA1.size() > 0 && signaturesSHA256.size() > 0;
    }

    public static int getSignatureCount() {
        return signaturesMD5.size() + signaturesSHA1.size() + signaturesSHA256.size();
    }

    public static void updateDatabase(Context context, THashSet<SignatureDatabase> signatureDatabases) {
        initDatabase(context);
        for (SignatureDatabase signatureDatabase : signatureDatabases) {
            new Downloader().execute(signatureDatabase.getUrl(), databasePath + "/" + signatureDatabase.getName());
        }
    }

    private static void initDatabase(Context context) {
        databasePath = new File(context.getFilesDir() + "/signatures/");
        databasePath.mkdir();

        signatureDatabases.clear();

        SharedPreferences prefs = context.getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_PRIVATE);
        if (prefs.getBoolean("SIGNATURES_EXTENDED", false)) {
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/bofhland_malware_attach.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/crdfam.clamav.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/doppelstern.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/hackingteam.hsb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/malware.expert.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/malwarehash.hsb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/porcupine.hsb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/rfxn.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/rogue.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/spamattach.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/spamimg.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/winnow.attachments.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/winnow_bad_cw.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/winnow_extended_malware.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/winnow_malware.hdb"));
        }
        if (prefs.getBoolean("SIGNATURES_CLAMAV-MAIN", false)) {
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/main.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/main.hsb"));
        }
        if (prefs.getBoolean("SIGNATURES_CLAMAV-DAILY", false)) {
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/daily.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/daily.hsb"));
        }
        if (prefs.getBoolean("SIGNATURES_CLAMAV-ANDROID", true)) {
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/Android.hdb"));
            signatureDatabases.add(new SignatureDatabase("https://spotco.us/Theia/Android.hsb"));
        }
    }

    public static void loadDatabase(Context context, boolean ignoreifLoaded, THashSet<SignatureDatabase> signatureDatabases) {
        if (!isDatabaseLoaded() || !ignoreifLoaded && isDatabaseLoaded()) {
            initDatabase(context);
            signaturesMD5.clear();
            signaturesSHA1.clear();
            signaturesSHA256.clear();
            System.gc();
            for (SignatureDatabase database : signatureDatabases) {
                File databaseLocation = new File(databasePath + "/" + database.getName());
                if (databaseLocation.exists()) {
                    if (database.getName().contains(".hdb")) {//.hdb format: md5, size, name
                        try {
                            BufferedReader reader = new BufferedReader(new FileReader(databaseLocation));
                            String line;
                            while ((line = reader.readLine()) != null) {
                                String[] lineS = line.split(":");
                                signaturesMD5.put(lineS[0], lineS[2]);
                            }
                            reader.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else if (database.getName().contains(".hsb")) {//.hsb format: sha256, size, name
                        try {
                            BufferedReader reader = new BufferedReader(new FileReader(databaseLocation));
                            String line;
                            while ((line = reader.readLine()) != null) {
                                String[] lineS = line.split(":");
                                if (lineS[0].length() == 32) {
                                    signaturesSHA1.put(lineS[0], lineS[2]);
                                } else {
                                    signaturesSHA256.put(lineS[0], lineS[2]);
                                }
                            }
                            reader.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            signaturesMD5.put("44d88612fea8a8f36de82e1278abb02f", "Eicar-Test-Signature");
            System.gc();
        }
    }

    public static class Downloader extends AsyncTask<String, String, String> {

        @Override
        protected String doInBackground(String... strings) {
            String url = strings[0];
            File out = new File(strings[1]);
            publishProgress("Downloading " + url);
            try {
                HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
                connection.setConnectTimeout(45000);
                connection.setReadTimeout(45000);
                connection.addRequestProperty("User-Agent", "Theia: Open Source Android Malware Scanner - Database Updater");
                if (out.exists()) {
                    connection.setIfModifiedSince(out.lastModified());
                }
                connection.connect();
                int res = connection.getResponseCode();
                if (res != 304) {
                    if (res == 200) {
                        if (out.exists()) {
                            out.delete();
                        }
                        FileOutputStream fileOutputStream = new FileOutputStream(out);

                        final byte data[] = new byte[1024];
                        int count;
                        while ((count = connection.getInputStream().read(data, 0, 1024)) != -1) {
                            fileOutputStream.write(data, 0, count);
                        }

                        fileOutputStream.close();
                        publishProgress("Successfully downloaded\n");
                    } else {
                        publishProgress("File not downloaded, response code " + res + "\n");
                    }
                } else {
                    publishProgress("File not changed\n");
                }
                connection.disconnect();
            } catch (Exception e) {
                e.printStackTrace();
                out.delete();
                publishProgress("Failed to download, check logcat\n");
            }
            return null;
        }

        @Override
        protected final void onProgressUpdate(String... progress) {
            log.append(progress[0] + "\n");
        }
    }
}

/*
Hypatia: A realtime malware scanner for Android
Copyright (c) 2017-2018 Divested Computing Group

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
package us.spotco.malwarescanner;

import android.Manifest;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import androidx.appcompat.app.AppCompatDelegate;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import android.text.method.ScrollingMovementMethod;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

public class MainActivity extends AppCompatActivity {

    private SharedPreferences prefs = null;
    private MalwareScanner malwareScanner = null;

    private TextView logView;

    private boolean scanSystem = false;
    private boolean scanApps = true;
    private boolean scanInternal = true;
    private boolean scanExternal = false;

    private static final int REQUEST_PERMISSION_EXTERNAL_STORAGE = 0;

    @Override
    protected final void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);

        logView = findViewById(R.id.txtLogOutput);
        logView.setMovementMethod(new ScrollingMovementMethod());
        logView.append("Copyright 2017-2020 Divested Computing Group\n");
        logView.append("License: GPLv3\n");
        logView.append("Powered by ClamAV signatures\n\n");

        malwareScanner = new MalwareScanner(this, this, true);

        prefs = getSharedPreferences(BuildConfig.APPLICATION_ID, Context.MODE_PRIVATE);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!malwareScanner.getStatus().equals(AsyncTask.Status.RUNNING)) {
                    startScanner();
                } else {
                    malwareScanner.cancel(true);
                }
            }
        });

        requestPermissions();

        Utils.considerStartService(this);
    }

    @Override
    public final boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        menu.findItem(R.id.toggleRealtime).setChecked(Utils.isServiceRunning(MalwareScannerService.class, this));
        menu.findItem(R.id.toggleOnionRouting).setChecked(prefs.getBoolean("ONION_ROUTING", false));
        return true;
    }

    private void requestPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_EXTERNAL_STORAGE);
        }
    }

    private void selectDatabases() {
        final String[] databases = {"ClamAV: Android Only (GPL-2.0)", "ClamAV: Main (GPL-2.0)", "ClamAV: Daily [LARGE] (GPL-2.0)", "ESET (BSD 2-Clause)", "Extra (unused)"};
        final boolean[] databaseDefaults = {
                prefs.getBoolean("SIGNATURES_CLAMAV-ANDROID", true),
                prefs.getBoolean("SIGNATURES_CLAMAV-MAIN", false),
                prefs.getBoolean("SIGNATURES_CLAMAV-DAILY", false),
                prefs.getBoolean("SIGNATURES_ESET", true),
                prefs.getBoolean("SIGNATURES_EXTRA", false)};

        Dialog dialog;
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(R.string.lblSelectDatabasesTitle);

        builder.setMultiChoiceItems(databases, databaseDefaults, new DialogInterface.OnMultiChoiceClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i, boolean selected) {
                databaseDefaults[i] = selected;
            }
        });
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                prefs.edit().putBoolean("SIGNATURES_CLAMAV-ANDROID", databaseDefaults[0]).apply();
                prefs.edit().putBoolean("SIGNATURES_CLAMAV-MAIN", databaseDefaults[1]).apply();
                prefs.edit().putBoolean("SIGNATURES_CLAMAV-DAILY", databaseDefaults[2]).apply();
                prefs.edit().putBoolean("SIGNATURES_ESET", databaseDefaults[3]).apply();
                prefs.edit().putBoolean("SIGNATURES_EXTRA", databaseDefaults[4]).apply();
            }
        });

        dialog = builder.create();
        dialog.show();
    }

    @Override
    public final boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.toggleOnionRouting:
                if (!item.isChecked()) {
                    if (Utils.isOrbotInstalled(this)) {
                        prefs.edit().putBoolean("ONION_ROUTING", !item.isChecked()).apply();
                        item.setChecked(true);
                    } else {
                        prefs.edit().putBoolean("ONION_ROUTING", false).apply();
                        item.setChecked(false);
                        Toast.makeText(this, R.string.lblOnionRoutingNotInstalled, Toast.LENGTH_SHORT).show();
                    }
                } else {
                    prefs.edit().putBoolean("ONION_ROUTING", false).apply();
                    item.setChecked(false);
                }
                break;
            case R.id.mnuUpdateDatabase:
                if (prefs.getBoolean("ONION_ROUTING", false)) {
                    Utils.requestStartOrbot(this);
                    logView.append("Downloading over Tor, this may take a while...\n");
                }
                updateDatabase();
                break;
            case R.id.mnuSelectDatabases:
                selectDatabases();
                break;
            case R.id.toggleRealtime:
                Intent realtimeScanner = new Intent(getApplicationContext(), MalwareScannerService.class);
                if (!item.isChecked()) {
                    prefs.edit().putBoolean("autostart", true).apply();
                    Utils.considerStartService(this);
                } else {
                    stopService(realtimeScanner);
                    prefs.edit().putBoolean("autostart", false).apply();
                }
                item.setChecked(!item.isChecked());
                break;
            case R.id.mnuScanSystem:
                scanSystem = !item.isChecked();
                item.setChecked(scanSystem);
                break;
            case R.id.mnuScanApps:
                scanApps = !item.isChecked();
                item.setChecked(scanApps);
                break;
            case R.id.mnuScanInternal:
                scanInternal = !item.isChecked();
                item.setChecked(scanInternal);
                break;
            case R.id.mnuScanExternal:
                scanExternal = !item.isChecked();
                item.setChecked(scanExternal);
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void startScanner() {
        malwareScanner = new MalwareScanner(this, this, true);
        Set<File> filesToScan = new HashSet<>();
        if (scanSystem) {
            filesToScan.addAll(Utils.getFilesRecursive(Environment.getRootDirectory()));
        }
        if (scanApps) {
            for (ApplicationInfo packageInfo : getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA)) {
                filesToScan.add(new File(packageInfo.sourceDir));
            }
        }
        if (scanInternal) {
            filesToScan.addAll(Utils.getFilesRecursive(Environment.getExternalStorageDirectory()));
        }
        if (scanExternal) {
            filesToScan.addAll(Utils.getFilesRecursive(new File("/storage")));
        }
        malwareScanner.executeOnExecutor(Utils.getThreadPoolExecutor(), filesToScan);
    }

    private void updateDatabase() {
        new Database((TextView) findViewById(R.id.txtLogOutput));
        Database.updateDatabase(this, Database.signatureDatabases);
        if (Database.isDatabaseLoaded()) {
            Database.loadDatabase(this, false, Database.signatureDatabases);
        }
    }

}

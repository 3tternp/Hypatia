package us.spotco.malwarescanner;

import android.Manifest;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.method.ScrollingMovementMethod;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.TextView;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

public class MainActivity extends AppCompatActivity {

    private boolean scanSystem = false;
    private boolean scanApps = true;
    private boolean scanInternal = true;
    private boolean scanExternal = false;

    private static final int REQUEST_PERMISSION_EXTERNAL_STORAGE = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        TextView logView = findViewById(R.id.txtLogOutput);
        logView.setMovementMethod(new ScrollingMovementMethod());
        logView.append("Copyright 2017 Spot Communications, Inc.\n");
        logView.append("License: GPLv3\n");
        logView.append("Powered by ClamAV signatures\n");
        logView.append("\nDisclaimer: This is an extremely basic signature scanner\n\n");

        final Database database = new Database(this, logView);
        final MalwareScanner malwareScanner = new MalwareScanner(this, this, true);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!malwareScanner.getStatus().equals(AsyncTask.Status.RUNNING)) {
                    Set<File> filesToScan = new HashSet<>();
                    if (scanSystem) {
                        filesToScan.addAll(Utils.getFilesRecursive(Environment.getRootDirectory()));
                    }
                    if (scanApps) {
                        for (ApplicationInfo packageInfo : getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA)) {
                            filesToScan.add(new File(packageInfo.sourceDir));
                        }
                    }
                    if (scanInternal) {
                        filesToScan.addAll(Utils.getFilesRecursive(Environment.getExternalStorageDirectory()));
                    }
                    if (scanExternal) {
                        filesToScan.addAll(Utils.getFilesRecursive(new File("/storage")));
                    }
                    malwareScanner.execute(filesToScan);
                } else {
                    malwareScanner.cancel(true);
                }
            }
        });

        requestPermissions();

        Intent realtimeScanner = new Intent(this, MalwareScannerService.class);
        startService(realtimeScanner);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    private void requestPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_EXTERNAL_STORAGE);
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.mnuUpdateDatabase:
                Database.updateDatabase(Database.signatureDatabases);
                if (Database.isDatabaseLoaded()) {
                    Database.loadDatabase(false, Database.signatureDatabases);
                }
                break;
            case R.id.mnuScanSystem:
                scanSystem = !item.isChecked();
                item.setChecked(scanSystem);
                break;
            case R.id.mnuScanApps:
                scanApps = !item.isChecked();
                item.setChecked(scanApps);
                break;
            case R.id.mnuScanInternal:
                scanInternal = !item.isChecked();
                item.setChecked(scanInternal);
                break;
            case R.id.mnuScanExternal:
                scanExternal = !item.isChecked();
                item.setChecked(scanExternal);
                break;
        }
        return super.onOptionsItemSelected(item);
    }
}

package us.spotco.malwarescanner;

import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.content.Context;
import android.os.AsyncTask;
import android.os.SystemClock;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.widget.TextView;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Set;

public class MalwareScanner extends AsyncTask<Set<File>, Object, String> {

    private Context context = null;
    private TextView logOutput = null;
    private boolean userFacing = false;
    private NotificationManager notificationManager = null;
    private long scanTime = 0;
    private HashMap<String, File> fileHashesMD5 = new HashMap<>();
    private HashMap<String, File> fileHashesSHA1 = new HashMap<>();
    private HashMap<String, File> fileHashesSHA256 = new HashMap<>();

    public MalwareScanner(Activity activity, Context context, boolean userFacing) {
        this.context = context;
        this.userFacing = userFacing;
        if (activity != null) {
            logOutput = activity.findViewById(R.id.txtLogOutput);
        } else {
            notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
        }
    }

    private void logResult(String result, boolean userFacingOnly) {
        if (userFacing) {
            logOutput.append(result + "\n");
        } else if (!userFacingOnly) {
            NotificationCompat.Builder mBuilder =
                    new NotificationCompat.Builder(context)
                            .setSmallIcon(R.drawable.ic_notification)
                            .setContentTitle(context.getText(R.string.lblNotificationRealtimeDetection))
                            .setContentText(result)
                            .setPriority(Notification.PRIORITY_MAX)
                            .setVisibility(Notification.VISIBILITY_SECRET)
                            .setDefaults(Notification.DEFAULT_VIBRATE);
            notificationManager.notify(new Random().nextInt(), mBuilder.build());
        }
    }

    @Override
    protected void onPreExecute() {
        scanTime = SystemClock.elapsedRealtime();
        logResult("Starting scan...", true);
    }

    @Override
    protected String doInBackground(Set<File>[] filesToScan) {
        //Pre
        fileHashesMD5.clear();
        fileHashesSHA1.clear();
        fileHashesSHA256.clear();

        publishProgress(filesToScan[0].size() + " files pending scan\n", true);

        Database.loadDatabase(true, Database.signatureDatabases);
        publishProgress("Loaded database with " + Database.getSignatureCount() + " signatures\n", true);

        //Get file hashes
        publishProgress("Hashing files...", true);
        for (File file : filesToScan[0]) {
            getFileHashes(file);
        }
        publishProgress("Calculated MD5/SHA-1/SHA-256 hashes for all files\n", true);

        //Check the hashes
        checkSignature("MD5", fileHashesMD5, Database.signaturesMD5);
        checkSignature("SHA-1", fileHashesSHA1, Database.signaturesSHA1);
        checkSignature("SHA-256", fileHashesSHA256, Database.signaturesSHA256);

        //Post
        fileHashesMD5.clear();
        fileHashesSHA1.clear();
        fileHashesSHA256.clear();
        System.gc();
        //Log.d("Thiea", "Scan completed in " + (SystemClock.elapsedRealtime() - scanTime) + " ms!");
        publishProgress("Scan completed in " + ((SystemClock.elapsedRealtime() - scanTime) / 1000) + " seconds!\n\n\n\n", true);
        return null;
    }

    @Override
    protected void onProgressUpdate(Object... objects) {
        logResult((String) objects[0], (boolean) objects[1]);
    }

    private void checkSignature(String hashType, HashMap<String, File> signaturesToCheck, HashMap<String, String> signatureDatabase) {
        if (signatureDatabase.size() > 0) {
            for (Map.Entry<String, File> file : signaturesToCheck.entrySet()) {
                if (signatureDatabase.containsKey(file.getKey())) {
                    String result = signatureDatabase.get(file.getKey());
                    publishProgress(result + " in " + file.getValue(), false);
                }
            }
            publishProgress("Checked all " + hashType + " hashes against signature databases\n", true);
        } else {
            publishProgress("No " + hashType + " signatures available\n", true);
        }
    }

    private void getFileHashes(File file) {
        try {
            InputStream fis = new FileInputStream(file);

            byte[] buffer = new byte[4096];
            int numRead;

            MessageDigest digestMD5 = MessageDigest.getInstance("MD5");
            MessageDigest digestSHA1 = MessageDigest.getInstance("SHA-1");
            MessageDigest digestSHA256 = MessageDigest.getInstance("SHA-256");

            do {
                numRead = fis.read(buffer);
                if (numRead > 0) {
                    digestMD5.update(buffer, 0, numRead);
                    digestSHA1.update(buffer, 0, numRead);
                    digestSHA256.update(buffer, 0, numRead);
                }
            } while (numRead != -1);

            fis.close();

            fileHashesMD5.put(String.format("%032x", new BigInteger(1, digestMD5.digest())), file);
            fileHashesSHA1.put(String.format("%032x", new BigInteger(1, digestSHA1.digest())), file);
            fileHashesSHA256.put(String.format("%064x", new BigInteger(1, digestSHA256.digest())), file);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
